---
# Source: dubbo-mesh/templates/proxy-profile-dubbo.yaml
apiVersion: flomesh.io/v1alpha1
kind: ProxyProfile
metadata:
  name: poc-pf-dubbo
spec:
  namespace: flomesh-dubbo
  selector:
    matchLabels:
      app.kubernetes.io/name: dubbo-mesh
      app.kubernetes.io/protocol: dubbo
  sidecars:
  - name: proxy
    env:
    - name: PIPY_SERVICE_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['service.flomesh.io/name']
    - name: PIPY_CONFIG_SRV_URL
      value: "http://mock-service.flomesh-dubbo.svc:9001/services/$(PIPY_SERVICE_NAME)/config"
    - name: PIPY_LISTEN_OUTBOUND_SOCKS
      value: "1080"
    - name: PIPY_LISTEN_INBOUND_DUBBO
      value: "20881"
    - name: PIPY_SERVICE_DUBBO_ADDR
      value: "127.0.0.1:20880"
    - name: PIPY_LOGGER_URL
      value: "http://127.0.0.1:9090/log"
  - name: logger
    image: flomesh/pipy-pjs:0.4.0-116
    imagePullPolicy: IfNotPresent
    env:
    - name: PIPY_SERVICE_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['service.flomesh.io/name']
    - name: PIPY_LOG_SINK
      value: "http://ch.demo.flomesh.cn:8123/?query=insert%20into%20log(message)%20format%20JSONAsString"
    - name: PIPY_METRICS_SINK
      value: "http://mock-service.flomesh-dubbo.svc:9001/services/$(PIPY_SERVICE_NAME)/metrics"
    - name: PIPY_LOGGER_LISTEN
      value: "9090"
  config:
    proxy.js: |+

      //
      // Environment variables:
      //   PIPY_LISTEN_OUTBOUND_SOCKS = 1080
      //   PIPY_LISTEN_INBOUND_DUBBO = 20881
      //   PIPY_SERVICE_DUBBO_ADDR = 127.0.0.1:20880
      //   PIPY_CONFIG_SRV_URL = http://127.0.0.1:9000/config
      //   PIPY_LOGGER = http://127.0.0.1:9090/log
      //
      // Configuration:
      //   {
      //     "version": 0,
      //     "inbound": {
      //       "whitelist": [],
      //       "blacklist": [],
      //       "circuitBreak": false,
      //       "rateLimit": 0,
      //       "dataLimit": 0,
      //       "canary": {
      //         "time": 1622949797851,
      //         "duration": 3600,
      //         "target": "127.0.0.1:30881"
      //       },
      //       "cache": {
      //         "size": 1000,
      //       }
      //     },
      //     "outbound": {
      //       "rateLimit": 0,
      //       "dataLimit": 0
      //     }
      //   }
      //
      
      pipy({
        _LOGGER_URL: new URL(os.env.PIPY_LOGGER || 'http://127.0.0.1:9090/log'),
      
        _g: {
          configInbound: null,
          configOutbound: null,
          responseCache: null,
          autoRequestID: 0,
        },
      
        _direction: '',
        _queue: null,
        _outboundAddr: '',
        _outboundPort: '',
        _autoRequestID: 0,
        _cached: false,
        _cachedKey: null,
      })
      
        //
        // Outbound traffic
        //
      
        .listen(os.env.PIPY_LISTEN_OUTBOUND_SOCKS || 1080)
        .proxySOCKS4(
          'outbound',
          (addr, port) => (
            _outboundAddr = addr,
              _outboundPort = port,
              true
          )
        )
      
        .pipeline('outbound')
        .link(
          'outbound-middleware', () => _outboundPort === 2181 || _outboundPort === 5672 || _outboundPort === 6379 || _outboundPort === 3306,
          'outbound-dubbo'
        )
      
        .pipeline('outbound-middleware')
        .connect(
          () => `${_outboundAddr}:${_outboundPort}`
        )
      
        .pipeline('outbound-dubbo')
        .onSessionStart(
          () => (
            _direction = 'outbound',
              _queue = []
          )
        )
        .tap(
          () => (_g.configOutbound.dataLimit || -1) + 'k'
        )
        .decodeDubbo()
        .tap(
          () => (_g.configOutbound.rateLimit || -1)
        )
        .fork('log-request')
        .encodeDubbo()
        .connect(
          () => `${_outboundAddr}:${_outboundPort+1}`
        )
        .fork('log-response')
      
        //
        // Inbound traffic
        //
      
        .listen(os.env.PIPY_LISTEN_INBOUND_DUBBO || 20881)
        .decodeDubbo()
        .link('canary')
      
        .pipeline('canary')
        .link(
          'forward', () => (
            ((
              canary,
              now,
              hash,
            ) => (
              canary = _g.configInbound.canary,
              canary && canary.time && (
                now = Date.now(),
                now > canary.time && (
                  hash = algo.hash(__inbound.remoteAddress) % (canary.duration * 1000),
                  hash < now - canary.time
                )
              )
            ))()
          ),
          'inbound'
        )
      
        .pipeline('forward')
        .encodeDubbo()
        .connect(
          () => _g.configInbound.canary.target
        )
      
        .pipeline('inbound')
        .onSessionStart(
          () => (
            _direction = 'inbound',
              _queue = []
          )
        )
        .tap(
          () => (_g.configInbound.dataLimit || -1) + 'k'
        )
        .tap(
          () => (_g.configInbound.rateLimit || -1)
        )
        .fork('log-request')
        .link(
          'circuit-break', () => _g.configInbound?.circuitBreak,
          'deny', () => _g.configInbound.whitelist && (
            !_g.configInbound.whitelist.some(mask => mask.contains(__inbound.remoteAddress))
          ),
          'deny', () => _g.configInbound.blacklist && (
            _g.configInbound.blacklist.some(mask => mask.contains(__inbound.remoteAddress))
          ),
          'cache', () => _g.responseCache,
          'pass'
        )
        .fork('log-response')
      
        .pipeline('cache')
        .replaceMessage(
          msg => (
            ((body, result) => (
              body = Hessian.decode(msg.body),
                body?.pop?.(),
                _cachedKey = JSON.stringify(body),
                result = _g.responseCache.get(_cachedKey),
                result ? (
                  _cached = true,
                    new Message(
                      {
                        isRequest: false,
                      },
                      result
                    )
                ) : (
                  _cached = false,
                    msg
                )
            ))()
          )
        )
        .link(
          'cache-return', () => _cached,
          'pass'
        )
      
        .pipeline('cache-return')
        .encodeDubbo()
      
        .pipeline('pass')
        .encodeDubbo()
        .connect(os.env.PIPY_SERVICE_DUBBO_ADDR || '127.0.0.1:20880')
      
        .pipeline('circuit-break')
        .replaceMessage(
          msg => new Message(
            {
              id: msg.head.id,
              status: 80, // SERVER_ERROR
              isRequest: false,
            },
            Hessian.encode([0, 'Request denied']),
          )
        )
        .encodeDubbo()
      
        .pipeline('deny')
        .replaceMessage(
          msg => new Message(
            {
              id: msg.head.id,
              status: 80, // SERVER_ERROR
              isRequest: false,
            },
            Hessian.encode([0, 'Request denied']),
          )
        )
        .encodeDubbo()
      
        //
        // Logging
        //
      
        .pipeline('log-request')
        .replaceMessage(
          msg => (
            _queue.push(++_g.autoRequestID),
              new Message(
                {
                  method: 'POST',
                  path: `${_LOGGER_URL.path}/req/${_g.autoRequestID}`,
                  headers: {
                    'x-pipy-log': JSON.stringify({
                      dir: _direction,
                      proto: 'dubbo',
                      id: msg.head.id,
                      remoteAddr: __inbound.remoteAddress,
                      remotePort: __inbound.remotePort,
                      localAddr: __inbound.localAddress,
                      localPort: __inbound.localPort,
                      session: __inbound.id,
                      time: Date.now(),
                      target: _direction === 'outbound' ? {
                        address: _outboundAddr,
                        port: _outboundPort,
                      } : {
                        address: __inbound.localAddress,
                        port: __inbound.localPort,
                      },
                    }),
                  },
                },
                msg.body
              )
          )
        )
        .merge('send-log')
      
        .pipeline('log-response')
        .decodeDubbo()
        .replaceMessage(
          msg => (
            _g.responseCache && !_cached && (
              _g.responseCache.set(_cachedKey, msg.body)
            ),
              new Message(
                {
                  method: 'POST',
                  path: `${_LOGGER_URL.path}/res/${_queue.shift()}`,
                  headers: {
                    'x-pipy-log': JSON.stringify({
                      time: Date.now(),
                      status: msg.head.status,
                    }),
                  },
                },
                msg.body
              )
          )
        )
        .merge('send-log')
      
        .pipeline('send-log')
        .encodeHttpRequest()
        .pack(
          1000,
          {
            timeout: 5,
          }
        )
        .connect(
          () => _LOGGER_URL.host,
          {
            bufferLimit: '8m',
          }
        )
      
        //
        // Configuration update
        //
      
        .task('5s')
        .use(
          'updater.js',
          'check',
          os.env.PIPY_CONFIG_SRV_URL || 'http://127.0.0.1:9000/config',
          config => (
            _g.configInbound = config.inbound,
              _g.configInbound.whitelist = config.inbound.whitelist?.map?.(cidr => new Netmask(cidr)),
              _g.configInbound.blacklist = config.inbound.blacklist?.map?.(cidr => new Netmask(cidr)),
              _g.responseCache = config.inbound.cache ? new algo.Cache(config.inbound.cache.size) : null,
              _g.configOutbound = config.outbound
          )
        )
    updater.js: |+

      pipy({
        _g: {
          configVersion: 0,
        },
      
        _configVersion: undefined,
        _configUpdated: undefined,
        _url: null,
      })
      
      .pipeline('check')
        .link(
          'check-config-http', () => __argv[0].startsWith('http://'),
          'check-config-file'
        )
      
      // Check configuration in file
      .pipeline('check-config-file')
        .onMessageStart(
          () => (
            _configVersion = os.stat(__argv[0])?.mtime | 0,
            _configVersion !== _g.configVersion && (
              _g.configVersion = _configVersion,
              _configUpdated = true
            )
          )
        )
        .link(
          'update-config-file', () => _configUpdated,
          'end-of-task'
        )
      
      // Update configuration from file
      .pipeline('update-config-file')
        .onSessionStart(
          () => (
            console.log('Updating configuration...'),
            __argv[1](JSON.decode(os.readFile(__argv[0]))),
            console.log('Configuration updated.')
          )
        )
        .link('end-of-task')
      
      // Check configuration via HTTP
      .pipeline('check-config-http')
        .replaceMessage(
          () => (
            _url = new URL(__argv[0] + '/version'),
            new Message({
              method: 'GET',
              path: _url.path,
              headers: {
                Host: _url.host,
              },
            })
          )
        )
        .encodeHttpRequest()
        .connect(() => _url.host)
        .decodeHttpResponse()
        .replaceMessage(msg => (
            msg.head.status === 200 && (
                _configUpdated = msg.body.toString() != _g.configVersion,
                _g.configVersion = msg.body.toString()
            ),
            msg
        ))
        .link(
          'update-config-http', () => _configUpdated,
          'end-of-task'
        )
      
      // Update configuration from HTTP
      .pipeline('update-config-http')
        .onSessionStart(
          () => console.log('Updating configuration...')
        )
        .replaceMessage(
          () => (
            _url = new URL(__argv[0]),
            new Message({
              method: 'GET',
              path: _url.path,
              headers: {
                Host: _url.host,
              },
            })
          )
        )
        .encodeHttpRequest()
        .connect(
          () => _url.host
        )
        .decodeHttpResponse()
        .onMessageBody(
          body => (
            __argv[1](JSON.decode(body)),
            console.log('Configuration updated.')
          )
        )
        .link('end-of-task')
      
      // End of task
      .pipeline('end-of-task')
        .replaceMessage(new SessionEnd)
    logger.js: |+

      //
      // Environment variables:
      //   PIPY_LOGGER_LISTEN = 9090
      //   PIPY_INSTANCE_ID = localhost
      //   PIPY_SERVICE_NAME = anonymous
      //   PIPY_LOG_SINK = http://127.0.0.1:9000/log
      //   PIPY_LOG_AUTH = <empty>
      //   PIPY_METRICS_SINK = http://127.0.0.1:9000/metrics
      //
      // HTTP log output:
      //   {
      //     "rid": 0,           // <- request ID
      //     "sid": 0,           // <- session ID
      //     "iid": "localhost", // <- instance ID
      //     "dir": "inbound",   // <- direction
      //     "proto": "http",
      //     "req": {
      //       "protocol": "HTTP/1.1",
      //       "method": "GET",
      //       "path": "/",
      //       "headers": {
      //         "content-type": "application/json"
      //       },
      //       "body": null,
      //     },
      //     "res": {
      //       "protocol": "HTTP/1.1",
      //       "status": 200,
      //       "statusText": "OK",
      //       "headers": {
      //         "content-type": "application/json"
      //       },
      //       "body": null
      //     },
      //     "reqTime": 1622979167297,
      //     "resTime": 1622979177971,
      //     "reqSize": 1000,
      //     "resSize": 2000,
      //     "remoteAddr": "192.168.0.200",
      //     "remotePort": 12345,
      //     "localAddr": "192.168.0.100",
      //     "localPort": 8080,
      //     "node": {
      //       "ip": "127.0.0.1",
      //       "name": "localhost"
      //     },
      //     "pod": {
      //       "ns": "default",
      //       "ip": "127.0.0.1",
      //       "name": "localhost"
      //     },
      //     "service": {
      //       "name": "anonymous"
      //     },
      //     "target": {
      //       "address": "192.168.0.123",
      //       "port": 20880
      //     },
      //     "trace": {
      //       "id": "xxx"
      //       "span": "xxx"
      //       "parent": "xxx"
      //       "sampled": "xxx"
      //     }
      //   }
      //
      // Dubbo log output:
      //   {
      //     "rid": 0,           // <- request ID
      //     "sid": 0,           // <- session ID
      //     "iid": "localhost", // <- instance ID
      //     "dir": "inbound",   // <- direction
      //     "proto": "dubbo",
      //     "req": {
      //       "id": "123",
      //       "version": "2.0.2",
      //       "service.name": "com.service.MyService",
      //       "service.version": "1.0.0"
      //       "method.name": "sayHello",
      //       "method.type": "Ljava/lang/String;"
      //       "arguments": [ ... ],
      //       "attachments": {}
      //     },
      //     "res": {
      //       "type": 0,
      //       "value": "Hello!"
      //     },
      //     "reqTime": 1622979167297,
      //     "resTime": 1622979177971,
      //     "reqSize": 1000,
      //     "resSize": 2000,
      //     "remoteAddr": "192.168.0.200",
      //     "remotePort": 12345,
      //     "localAddr": "192.168.0.100",
      //     "localPort": 20880,
      //     "node": {
      //       "ip": "127.0.0.1",
      //       "name": "localhost"
      //     },
      //     "pod": {
      //       "ns": "default",
      //       "ip": "127.0.0.1",
      //       "name": "localhost"
      //     },
      //     "service": {
      //       "name": "anonymous"
      //     },
      //     "target": {
      //       "address": "192.168.0.123",
      //       "port": 20880
      //     },
      //     "trace": {
      //       "id": "xxx"
      //       "span": "xxx"
      //       "parent": "xxx"
      //       "sampled": "xxx"
      //     }
      //   }
      //
      // Metrics output:
      //   {
      //     "status": {
      //       "http": {},
      //       "dubbo": {}
      //     },
      //     "latency": {
      //       "http": {
      //         "inbound": {
      //           "p90": 0,
      //           "p95": 0,
      //           "p99": 0
      //         },
      //         "outbound": {
      //           "p90": 0,
      //           "p95": 0,
      //           "p99": 0
      //         }
      //       },
      //       "dubbo": {
      //         "inbound": {
      //           "p90": 0,
      //           "p95": 0,
      //           "p99": 0
      //         },
      //         "outbound": {
      //           "p90": 0,
      //           "p95": 0,
      //           "p99": 0
      //         }
      //       }
      //     }
      //   }
      //
      
      pipy({
        _INSTANCE_ID: os.env.PIPY_INSTANCE_ID || os.env._pod_UID || 'localhost',
        _LOG_AUTH: os.env.PIPY_LOG_AUTH || undefined,
        _LOG_SINK_URL: new URL(os.env.PIPY_LOG_SINK || 'http://127.0.0.1:9000/log'),
        _METRICS_SINK_URL: new URL(os.env.PIPY_METRICS_SINK || 'http://127.0.0.1:9000/metrics'),
      
        _SERVICE_INFO: {
          name: os.env.PIPY_SERVICE_NAME || 'anonymous',
        },
      
        _NODE_INFO: {
          ip: os.env._pod_hostIP || '127.0.0.1',
          name: os.env._pod_nodeName || 'localhost',
        },
      
        _POD_INFO: {
          ns: os.env._pod_ns || 'default',
          ip: os.env._pod_IP || '127.0.0.1',
          name: os.env._pod_name || os.env.HOSTNAME || 'localhost',
        },
      
        _CONTENT_TYPES: {
          'text/plain': true,
          'text/html': true,
          'application/json': true,
          'application/xml': true,
          'multipart/form-data': true,
        },
      
        _counters: {
          http: {},
          dubbo: {},
        },
      
        _statuses: {
          http: {},
          dubbo: {},
        },
      
        _percentile: {
          http: {
            inbound: new algo.Percentile([
              1,2,5,7,10,15,20,25,30,40,50,60,70,80,90,100,
              200,300,400,500,1000,2000,5000,10000,30000,60000,
            ]),
            outbound: new algo.Percentile([
              1,2,5,7,10,15,20,25,30,40,50,60,70,80,90,100,
              200,300,400,500,1000,2000,5000,10000,30000,60000,
            ]),
          },
          dubbo: {
            inbound: new algo.Percentile([
              1,2,5,7,10,15,20,25,30,40,50,60,70,80,90,100,
              200,300,400,500,1000,2000,5000,10000,30000,60000,
            ]),
            outbound: new algo.Percentile([
              1,2,5,7,10,15,20,25,30,40,50,60,70,80,90,100,
              200,300,400,500,1000,2000,5000,10000,30000,60000,
            ]),
          },
        },
      
        _requests: new algo.Cache(10000),
        _responses: new algo.Cache(10000),
        _contentEncoding: null,
      
        _router: new algo.URLRouter({
          '/log/req/*': msg => (
            ((
              id
            ) => (
              id = msg.head.path.substring(9),
              _requests.set(id, msg),
              _combine(id)
            ))()
          ),
      
          '/log/res/*': msg => (
            ((
              id
            ) => (
              id = msg.head.path.substring(9),
              _responses.set(id, msg),
              _combine(id)
            ))()
          ),
      
          '/*': () => new Message({ status: 404 }, 'Not found'),
        }),
      
        _combine: (id) => (
          ((
            dir, proto, status, attachments,
            req, reqInfo, reqBody, reqHeaders, reqTime, reqType, reqLogBody,
            res, resInfo, resBody, resHeaders, resTime, resType, resLogBody,
          ) => (
            req = _requests.get(id),
            res = _responses.get(id),
            req && res ? (
              _requests.remove(id),
              _responses.remove(id),
              reqHeaders = req.head.headers,
              resHeaders = res.head.headers,
              reqInfo = JSON.parse(reqHeaders['x-pipy-log']),
              resInfo = JSON.parse(resHeaders['x-pipy-log']),
              delete reqHeaders['x-pipy-log'],
              delete resHeaders['x-pipy-log'],
              reqTime = reqInfo.time,
              resTime = resInfo.time,
              reqType = reqHeaders['content-type']?.split?.(';')?.[0],
              resType = resHeaders['content-type']?.split?.(';')?.[0],
              reqLogBody = Boolean(_CONTENT_TYPES[reqType]),
              resLogBody = Boolean(_CONTENT_TYPES[resType]),
              dir = reqInfo.dir,
              proto = reqInfo.proto,
              status = resInfo.status,
              _counters[proto].total = (_counters[proto].total|0) + 1,
              _statuses[proto][status] = (_statuses[proto][status]|0) + 1,
              _percentile[proto][dir]?.score?.(resTime - reqTime),
              proto === 'dubbo' ? (
                reqBody = Hessian.decode(req.body),
                resBody = Hessian.decode(res.body),
                reqBody && resBody ? (
                  attachments = reqBody.pop(),
                  status !== 20 && (_counters[proto].error = (_counters[proto].error|0) + 1),
                  new Message(
                    JSON.encode({
                      rid: +id,
                      sid: reqInfo.session,
                      iid: _INSTANCE_ID,
                      dir,
                      proto,
                      req: {
                        id: reqInfo.id,
                        version: reqBody?.[0],
                        'service.name': reqBody?.[1],
                        'service.version': reqBody?.[2],
                        'method.name': reqBody?.[3],
                        'method.type': reqBody?.[4],
                        arguments: reqBody,
                        attachments,
                      },
                      res: {
                        status,
                        type: resBody?.[0],
                        value: resBody?.[1],
                      },
                      reqTime,
                      resTime,
                      reqSize: req.body.size,
                      resSize: res.body.size,
                      remoteAddr: reqInfo.remoteAddr,
                      remotePort: reqInfo.remotePort,
                      localAddr: reqInfo.localAddr,
                      localPort: reqInfo.localPort,
                      target: reqInfo.target,
                      node: _NODE_INFO,
                      pod: _POD_INFO,
                      service: _SERVICE_INFO,
                      trace: {
                        id: attachments?.['X-B3-TraceId'],
                        span: attachments?.['X-B3-SpanId'],
                        parent: attachments?.['X-B3-ParentSpanId'],
                        sampled: attachments?.['X-B3-Sampled'],
                      },
                    }).push('\n')
                  )
                ) : new Message
              ) : (
                status >= 400 && (_counters[proto].error = (_counters[proto].total|0) + 1),
                new Message(
                  JSON.encode({
                    rid: +id,
                    sid: reqInfo.session,
                    iid: _INSTANCE_ID,
                    dir,
                    proto,
                    req: {
                      protocol: reqInfo.protocol,
                      method: reqInfo.method,
                      path: reqInfo.path,
                      headers: reqHeaders,
                      body: reqLogBody ? req.body.toString() : undefined,
                    },
                    res: {
                      protocol: resInfo.protocol,
                      status,
                      statusText: resInfo.statusText,
                      headers: resHeaders,
                      body: resLogBody ? res.body.toString() : undefined,
                    },
                    reqTime,
                    resTime,
                    reqSize: reqInfo.size,
                    resSize: resInfo.size,
                    remoteAddr: reqInfo.remoteAddr,
                    remotePort: reqInfo.remotePort,
                    localAddr: reqInfo.localAddr,
                    localPort: reqInfo.localPort,
                    target: reqInfo.target,
                    node: _NODE_INFO,
                    pod: _POD_INFO,
                    service: _SERVICE_INFO,
                    trace: {
                      id: reqHeaders['x-b3-traceid'],
                      span: reqHeaders['x-b3-spanid'],
                      parent: reqHeaders['x-b3-parentspanid'],
                      sampled: reqHeaders['x-b3-sampled'],
                    },
                  }).push('\n')
                )
              )
            ) : new Message
          ))()
        ),
      })
      
      // Request/response input
      .listen(os.env.PIPY_LOGGER_LISTEN || 9090)
        .decodeHttpRequest()
        .onMessageStart(
          msg => _contentEncoding = msg.head.headers['content-encoding']
        )
        .link(
          'decompress', () => _contentEncoding === 'gzip',
          'bypass'
        )
        .replaceMessage(
          msg => _router.find(msg.head.path)(msg)
        )
        .merge('batch')
        .dummy()
      
      .pipeline('decompress')
        .decompressMessageBody('inflate')
      
      // Accumulate log messages into batches
      .pipeline('batch')
        .pack(
          1000,
          {
            timeout: 5,
          }
        )
        .replaceMessageStart(
          () => new MessageStart({
            method: 'POST',
            path: _LOG_SINK_URL.path,
            headers: {
              'Host': _LOG_SINK_URL.host,
              'Content-Type': 'application/json',
              'Authorization': _LOG_AUTH,
            }
          })
        )
        .encodeHttpRequest()
        .connect(
          () => _LOG_SINK_URL.host,
          {
            bufferLimit: '8m',
          }
        )
      
      // Regularly push metrics out
      .task('5s')
        .replaceMessage(
          () => new Message(
            {
              method: 'POST',
              path: _METRICS_SINK_URL.path,
              headers: {
                'content-type': 'application/json',
              },
            },
            JSON.encode({
              counts: _counters,
              status: _statuses,
              latency: {
                http: {
                  inbound: {
                    p90: _percentile.http.inbound.calculate(90),
                    p95: _percentile.http.inbound.calculate(95),
                    p99: _percentile.http.inbound.calculate(99),
                  },
                  outbound: {
                    p90: _percentile.http.outbound.calculate(90),
                    p95: _percentile.http.outbound.calculate(95),
                    p99: _percentile.http.outbound.calculate(99),
                  },
                },
                dubbo: {
                  inbound: {
                    p90: _percentile.dubbo.inbound.calculate(90),
                    p95: _percentile.dubbo.inbound.calculate(95),
                    p99: _percentile.dubbo.inbound.calculate(99),
                  },
                  outbound: {
                    p90: _percentile.dubbo.outbound.calculate(90),
                    p95: _percentile.dubbo.outbound.calculate(95),
                    p99: _percentile.dubbo.outbound.calculate(99),
                  },
                },
              },
            })
          )
        )
        .mux('send-metrics')
        .replaceMessage(
          () => (
            _counters.http = {},
            _counters.dubbo = {},
            _statuses.http = {},
            _statuses.dubbo = {},
            _percentile.http.inbound.reset(),
            _percentile.http.outbound.reset(),
            _percentile.dubbo.inbound.reset(),
            _percentile.dubbo.outbound.reset(),
            new SessionEnd
          )
        )
      
      .pipeline('send-metrics')
        .encodeHttpRequest()
        .connect(
          () => _METRICS_SINK_URL.host
        )
        .decodeHttpResponse()
      
      .pipeline('bypass')
---
# Source: dubbo-mesh/templates/proxy-profile-http.yaml
apiVersion: flomesh.io/v1alpha1
kind: ProxyProfile
metadata:
  name: poc-pf-http
spec:
  namespace: flomesh-dubbo
  selector:
    matchLabels:
      app.kubernetes.io/name: dubbo-mesh
      app.kubernetes.io/protocol: http
  sidecars:
  - name: proxy
    env:
    - name: PIPY_SERVICE_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['service.flomesh.io/name']
    - name: PIPY_CONFIG_SRV_URL
      value: "http://mock-service.flomesh-dubbo.svc:9001/services/$(PIPY_SERVICE_NAME)/config"
    - name: PIPY_LISTEN_OUTBOUND_SOCKS
      value: "1080"
    - name: PIPY_LISTEN_INBOUND_HTTP
      value: "8090"
    - name: PIPY_SERVICE_HTTP_ADDR
      value: "127.0.0.1:8080"
    - name: PIPY_LOGGER_URL
      value: "http://127.0.0.1:9090/log"
  - name: logger
    image: flomesh/pipy-pjs:0.4.0-116
    imagePullPolicy: IfNotPresent
    env:
    - name: PIPY_SERVICE_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['service.flomesh.io/name']
    - name: PIPY_LOG_SINK
      value: "http://ch.demo.flomesh.cn:8123/?query=insert%20into%20log(message)%20format%20JSONAsString"
    - name: PIPY_METRICS_SINK
      value: "http://mock-service.flomesh-dubbo.svc:9001/services/$(PIPY_SERVICE_NAME)/metrics"
    - name: PIPY_LOGGER_LISTEN
      value: "9090"
  config:
    proxy.js: |+

      //
      // Environment variables:
      //   PIPY_LISTEN_OUTBOUND_SOCKS = 1080
      //   PIPY_LISTEN_INBOUND_HTTP = 8090
      //   PIPY_SERVICE_HTTP_ADDR = 127.0.0.1:8080
      //   PIPY_CONFIG_SRV_URL = http://127.0.0.1:9000/config
      //   PIPY_LOGGER_URL = http://127.0.0.1:9090/log
      //
      // Configuration:
      //   {
      //     "version": 0,
      //     "inbound": {
      //       "whitelist": [],
      //       "blacklist": [],
      //       "circuitBreak": false,
      //       "rateLimit": 0,
      //       "dataLimit": 0,
      //       "canary": {
      //         "time": 1622949797851,
      //         "duration": 3600,
      //         "target": "127.0.0.1:30881"
      //       },
      //       "cache": {
      //         "size": 1000,
      //       }
      //     },
      //     "outbound": {
      //       "rateLimit": 0,
      //       "dataLimit": 0
      //     }
      //   }
      //
      
      pipy({
        _LOGGER_URL: new URL(os.env.PIPY_LOGGER_URL || 'http://127.0.0.1:9090/log'),
      
        _g: {
          configInbound: null,
          configOutbound: null,
          responseCache: null,
          autoRequestID: 0,
        },
      
        _direction: '',
        _queue: null,
        _outboundAddr: '',
        _outboundPort: '',
        _autoRequestID: 0,
        _cached: false,
        _cachedKey: null,
      })
      
        //
        // Outbound traffic
        //
      
        .listen(os.env.PIPY_LISTEN_OUTBOUND_SOCKS || 1080)
        .proxySOCKS4(
          'outbound',
          (addr, port) => (
            _outboundAddr = addr,
            _outboundPort = port,
            true
          )
        )
      
        .pipeline('outbound')
        .link(
          'outbound-middleware', () => _outboundPort === 2181 || _outboundPort === 5672 || _outboundPort === 6379 || _outboundPort === 3306,
          'outbound-dubbo'
        )
      
        .pipeline('outbound-middleware')
        .connect(
          () => `${_outboundAddr}:${_outboundPort}`
        )
      
        .pipeline('outbound-dubbo')
        .onSessionStart(
          () => (
            _direction = 'outbound',
            _queue = []
          )
        )
        .tap(
          () => (_g.configOutbound.dataLimit || -1) + 'k'
        )
        .decodeDubbo()
        .tap(
          () => (_g.configOutbound.rateLimit || -1)
        )
        .fork('log-dubbo-request')
        .encodeDubbo()
        .connect(
          () => `${_outboundAddr}:${_outboundPort + 1}`
        )
        .fork('log-dubbo-response')
      
        //
        // Inbound traffic
        //
      
        .listen(os.env.PIPY_LISTEN_INBOUND_HTTP || 8090)
          .onSessionStart(
            () => (
              _direction = 'inbound',
              _queue = []
            )
          )
          .fork('log-http-request')
          .connect(os.env.PIPY_SERVICE_HTTP_ADDR || '127.0.0.1:8080')
          .fork('log-http-response')
      
      
        // .decodeDubbo()
        // .link('canary')
      
        .pipeline('canary')
        .link(
          'forward', () => (
            ((
              canary,
              now,
              hash,
            ) => (
              canary = _g.configInbound.canary,
              canary && canary.time && (
                now = Date.now(),
                now > canary.time && (
                  hash = algo.hash(__inbound.remoteAddress) % (canary.duration * 1000),
                  hash < now - canary.time
                )
              )
            ))()
          ),
          'inbound'
        )
      
        .pipeline('forward')
        //.encodeDubbo()
        .connect(
          () => _g.configInbound.canary.target
        )
      
        .pipeline('inbound')
        .onSessionStart(
          () => (
            _direction = 'inbound',
            _queue = []
          )
        )
        .tap(
          () => (_g.configInbound.dataLimit || -1) + 'k'
        )
        .tap(
          () => (_g.configInbound.rateLimit || -1)
        )
        .fork('log-http-request')
        .link(
          'circuit-break', () => _g.configInbound?.circuitBreak,
          'deny', () => _g.configInbound.whitelist && (
            !_g.configInbound.whitelist.some(mask => mask.contains(__inbound.remoteAddress))
          ),
          'deny', () => _g.configInbound.blacklist && (
            _g.configInbound.blacklist.some(mask => mask.contains(__inbound.remoteAddress))
          ),
          'cache', () => _g.responseCache,
          'pass'
        )
        .fork('log-http-response')
      
        .pipeline('cache')
        .replaceMessage(
          msg => (
            ((body, result) => (
              body = msg.body,
                body?.pop?.(),
                _cachedKey = JSON.stringify(body),
                result = _g.responseCache.get(_cachedKey),
                result ? (
                  _cached = true,
                  new Message(
                    {
                      isRequest: false,
                    },
                    result
                  )
                ) : (
                  _cached = false,
                  msg
                )
            ))()
          )
        )
        .link(
          'cache-return', () => _cached,
          'pass'
        )
      
        .pipeline('cache-return')
        .encodeDubbo()
      
        .pipeline('pass')
        .encodeDubbo()
        .connect(os.env.PIPY_SERVICE_HTTP_ADDR || '127.0.0.1:8080')
      
        .pipeline('circuit-break')
        .replaceMessage(
          msg => new Message(
            {
              id: msg.head.id,
              status: 80, // SERVER_ERROR
              isRequest: false,
            },
            Hessian.encode([0, 'Request denied']),
          )
        )
        .encodeDubbo()
      
        .pipeline('deny')
        .replaceMessage(
          msg => new Message(
            {
              id: msg.head.id,
              status: 80, // SERVER_ERROR
              isRequest: false,
            },
            Hessian.encode([0, 'Request denied']),
          )
        )
        .encodeDubbo()
      
        //
        // Logging
        //
        .pipeline('log-http-request')
        .decodeHttpRequest()
        .replaceMessage(
          msg => (
            _queue.push(++_g.autoRequestID),
            new Message(
              {
                method: 'POST',
                path: `${_LOGGER_URL.path}/req/${_g.autoRequestID}`,
                headers: {
                  ...msg.head.headers,
                  'x-pipy-log': JSON.stringify({
                    dir: _direction,
                    proto: 'http',
                    id: msg.head.id,
                    method: msg.head.method,
                    path: msg.head.path,
                    remoteAddr: __inbound.remoteAddress,
                    remotePort: __inbound.remotePort,
                    localAddr: __inbound.localAddress,
                    localPort: __inbound.localPort,
                    session: __inbound.id,
                    time: Date.now(),
                  }),
                },
              },
              msg.body
            )
          )
        )
        .merge('send-log')
      
        .pipeline('log-http-response')
        .decodeHttpResponse()
        .replaceMessage(
          msg => (
            new Message(
              {
                method: 'POST',
                path: `${_LOGGER_URL.path}/res/${_queue.shift()}`,
                headers: {
                  ...msg.head.headers,
                  'x-pipy-log': JSON.stringify({
                    proto: 'http',
                    status: msg.head.status,
                    statusText: msg.head.statusText,
                    target: _direction === 'outbound' ? _target : `${__inbound.localAddress}:${__inbound.localPort}`,
                    time: Date.now(),
                  }),
                },
              },
              msg.body
            )
          )
        )
        .merge('send-log')
      
        .pipeline('log-dubbo-request')
        .replaceMessage(
          msg => (
            _queue.push(++_g.autoRequestID),
            new Message(
              {
                method: 'POST',
                path: `${_LOGGER_URL.path}/req/${_g.autoRequestID}`,
                headers: {
                  'x-pipy-log': JSON.stringify({
                    dir: _direction,
                    proto: 'dubbo',
                    id: msg.head.id,
                    remoteAddr: __inbound.remoteAddress,
                    remotePort: __inbound.remotePort,
                    localAddr: __inbound.localAddress,
                    localPort: __inbound.localPort,
                    session: __inbound.id,
                    time: Date.now(),
                    target: _direction === 'outbound' ? {
                      address: _outboundAddr,
                      port: _outboundPort,
                    } : {
                      address: __inbound.localAddress,
                      port: __inbound.localPort,
                    },
                  }),
                },
              },
              msg.body
            )
          )
        )
        .merge('send-log')
      
        .pipeline('log-dubbo-response')
        .decodeDubbo()
        .replaceMessage(
          msg => (
            _g.responseCache && !_cached && (
              _g.responseCache.set(_cachedKey, msg.body)
            ),
            new Message(
              {
                method: 'POST',
                path: `${_LOGGER_URL.path}/res/${_queue.shift()}`,
                headers: {
                  'x-pipy-log': JSON.stringify({
                    time: Date.now(),
                    status: msg.head.status,
                  }),
                },
              },
              msg.body
            )
          )
        )
        .merge('send-log')
      
        .pipeline('send-log')
        .encodeHttpRequest()
        .pack(
          1000,
          {
            timeout: 5,
          }
        )
        .connect(
          () => _LOGGER_URL.host,
          {
            bufferLimit: '8m',
          }
        )
      
        //
        // Configuration update
        //
      
        .task('5s')
        .use(
          'updater.js',
          'check',
          os.env.PIPY_CONFIG_SRV_URL || 'http://127.0.0.1:9000/config',
          config => (
            _g.configInbound = config.inbound,
            _g.configInbound.whitelist = config.inbound.whitelist?.map?.(cidr => new Netmask(cidr)),
            _g.configInbound.blacklist = config.inbound.blacklist?.map?.(cidr => new Netmask(cidr)),
            _g.responseCache = config.inbound.cache ? new algo.Cache(config.inbound.cache.size) : null,
            _g.configOutbound = config.outbound
          )
        )
    updater.js: |+

      pipy({
        _g: {
          configVersion: 0,
        },
      
        _configVersion: undefined,
        _configUpdated: undefined,
        _url: null,
      })
      
      .pipeline('check')
        .link(
          'check-config-http', () => __argv[0].startsWith('http://'),
          'check-config-file'
        )
      
      // Check configuration in file
      .pipeline('check-config-file')
        .onMessageStart(
          () => (
            _configVersion = os.stat(__argv[0])?.mtime | 0,
            _configVersion !== _g.configVersion && (
              _g.configVersion = _configVersion,
              _configUpdated = true
            )
          )
        )
        .link(
          'update-config-file', () => _configUpdated,
          'end-of-task'
        )
      
      // Update configuration from file
      .pipeline('update-config-file')
        .onSessionStart(
          () => (
            console.log('Updating configuration...'),
            __argv[1](JSON.decode(os.readFile(__argv[0]))),
            console.log('Configuration updated.')
          )
        )
        .link('end-of-task')
      
      // Check configuration via HTTP
      .pipeline('check-config-http')
        .replaceMessage(
          () => (
            _url = new URL(__argv[0] + '/version'),
            new Message({
              method: 'GET',
              path: _url.path,
              headers: {
                Host: _url.host,
              },
            })
          )
        )
        .encodeHttpRequest()
        .connect(() => _url.host)
        .decodeHttpResponse()
        .replaceMessage(msg => (
            msg.head.status === 200 && (
                _configUpdated = msg.body.toString() != _g.configVersion,
                _g.configVersion = msg.body.toString()
            ),
            msg
        ))
        .link(
          'update-config-http', () => _configUpdated,
          'end-of-task'
        )
      
      // Update configuration from HTTP
      .pipeline('update-config-http')
        .onSessionStart(
          () => console.log('Updating configuration...')
        )
        .replaceMessage(
          () => (
            _url = new URL(__argv[0]),
            new Message({
              method: 'GET',
              path: _url.path,
              headers: {
                Host: _url.host,
              },
            })
          )
        )
        .encodeHttpRequest()
        .connect(
          () => _url.host
        )
        .decodeHttpResponse()
        .onMessageBody(
          body => (
            __argv[1](JSON.decode(body)),
            console.log('Configuration updated.')
          )
        )
        .link('end-of-task')
      
      // End of task
      .pipeline('end-of-task')
        .replaceMessage(new SessionEnd)
    logger.js: |+

      //
      // Environment variables:
      //   PIPY_LOGGER_LISTEN = 9090
      //   PIPY_INSTANCE_ID = localhost
      //   PIPY_SERVICE_NAME = anonymous
      //   PIPY_LOG_SINK = http://127.0.0.1:9000/log
      //   PIPY_LOG_AUTH = <empty>
      //   PIPY_METRICS_SINK = http://127.0.0.1:9000/metrics
      //
      // HTTP log output:
      //   {
      //     "rid": 0,           // <- request ID
      //     "sid": 0,           // <- session ID
      //     "iid": "localhost", // <- instance ID
      //     "dir": "inbound",   // <- direction
      //     "proto": "http",
      //     "req": {
      //       "protocol": "HTTP/1.1",
      //       "method": "GET",
      //       "path": "/",
      //       "headers": {
      //         "content-type": "application/json"
      //       },
      //       "body": null,
      //     },
      //     "res": {
      //       "protocol": "HTTP/1.1",
      //       "status": 200,
      //       "statusText": "OK",
      //       "headers": {
      //         "content-type": "application/json"
      //       },
      //       "body": null
      //     },
      //     "reqTime": 1622979167297,
      //     "resTime": 1622979177971,
      //     "reqSize": 1000,
      //     "resSize": 2000,
      //     "remoteAddr": "192.168.0.200",
      //     "remotePort": 12345,
      //     "localAddr": "192.168.0.100",
      //     "localPort": 8080,
      //     "node": {
      //       "ip": "127.0.0.1",
      //       "name": "localhost"
      //     },
      //     "pod": {
      //       "ns": "default",
      //       "ip": "127.0.0.1",
      //       "name": "localhost"
      //     },
      //     "service": {
      //       "name": "anonymous"
      //     },
      //     "target": {
      //       "address": "192.168.0.123",
      //       "port": 20880
      //     },
      //     "trace": {
      //       "id": "xxx"
      //       "span": "xxx"
      //       "parent": "xxx"
      //       "sampled": "xxx"
      //     }
      //   }
      //
      // Dubbo log output:
      //   {
      //     "rid": 0,           // <- request ID
      //     "sid": 0,           // <- session ID
      //     "iid": "localhost", // <- instance ID
      //     "dir": "inbound",   // <- direction
      //     "proto": "dubbo",
      //     "req": {
      //       "id": "123",
      //       "version": "2.0.2",
      //       "service.name": "com.service.MyService",
      //       "service.version": "1.0.0"
      //       "method.name": "sayHello",
      //       "method.type": "Ljava/lang/String;"
      //       "arguments": [ ... ],
      //       "attachments": {}
      //     },
      //     "res": {
      //       "type": 0,
      //       "value": "Hello!"
      //     },
      //     "reqTime": 1622979167297,
      //     "resTime": 1622979177971,
      //     "reqSize": 1000,
      //     "resSize": 2000,
      //     "remoteAddr": "192.168.0.200",
      //     "remotePort": 12345,
      //     "localAddr": "192.168.0.100",
      //     "localPort": 20880,
      //     "node": {
      //       "ip": "127.0.0.1",
      //       "name": "localhost"
      //     },
      //     "pod": {
      //       "ns": "default",
      //       "ip": "127.0.0.1",
      //       "name": "localhost"
      //     },
      //     "service": {
      //       "name": "anonymous"
      //     },
      //     "target": {
      //       "address": "192.168.0.123",
      //       "port": 20880
      //     },
      //     "trace": {
      //       "id": "xxx"
      //       "span": "xxx"
      //       "parent": "xxx"
      //       "sampled": "xxx"
      //     }
      //   }
      //
      // Metrics output:
      //   {
      //     "status": {
      //       "http": {},
      //       "dubbo": {}
      //     },
      //     "latency": {
      //       "http": {
      //         "inbound": {
      //           "p90": 0,
      //           "p95": 0,
      //           "p99": 0
      //         },
      //         "outbound": {
      //           "p90": 0,
      //           "p95": 0,
      //           "p99": 0
      //         }
      //       },
      //       "dubbo": {
      //         "inbound": {
      //           "p90": 0,
      //           "p95": 0,
      //           "p99": 0
      //         },
      //         "outbound": {
      //           "p90": 0,
      //           "p95": 0,
      //           "p99": 0
      //         }
      //       }
      //     }
      //   }
      //
      
      pipy({
        _INSTANCE_ID: os.env.PIPY_INSTANCE_ID || os.env._pod_UID || 'localhost',
        _LOG_AUTH: os.env.PIPY_LOG_AUTH || undefined,
        _LOG_SINK_URL: new URL(os.env.PIPY_LOG_SINK || 'http://127.0.0.1:9000/log'),
        _METRICS_SINK_URL: new URL(os.env.PIPY_METRICS_SINK || 'http://127.0.0.1:9000/metrics'),
      
        _SERVICE_INFO: {
          name: os.env.PIPY_SERVICE_NAME || 'anonymous',
        },
      
        _NODE_INFO: {
          ip: os.env._pod_hostIP || '127.0.0.1',
          name: os.env._pod_nodeName || 'localhost',
        },
      
        _POD_INFO: {
          ns: os.env._pod_ns || 'default',
          ip: os.env._pod_IP || '127.0.0.1',
          name: os.env._pod_name || os.env.HOSTNAME || 'localhost',
        },
      
        _CONTENT_TYPES: {
          'text/plain': true,
          'text/html': true,
          'application/json': true,
          'application/xml': true,
          'multipart/form-data': true,
        },
      
        _counters: {
          http: {},
          dubbo: {},
        },
      
        _statuses: {
          http: {},
          dubbo: {},
        },
      
        _percentile: {
          http: {
            inbound: new algo.Percentile([
              1,2,5,7,10,15,20,25,30,40,50,60,70,80,90,100,
              200,300,400,500,1000,2000,5000,10000,30000,60000,
            ]),
            outbound: new algo.Percentile([
              1,2,5,7,10,15,20,25,30,40,50,60,70,80,90,100,
              200,300,400,500,1000,2000,5000,10000,30000,60000,
            ]),
          },
          dubbo: {
            inbound: new algo.Percentile([
              1,2,5,7,10,15,20,25,30,40,50,60,70,80,90,100,
              200,300,400,500,1000,2000,5000,10000,30000,60000,
            ]),
            outbound: new algo.Percentile([
              1,2,5,7,10,15,20,25,30,40,50,60,70,80,90,100,
              200,300,400,500,1000,2000,5000,10000,30000,60000,
            ]),
          },
        },
      
        _requests: new algo.Cache(10000),
        _responses: new algo.Cache(10000),
        _contentEncoding: null,
      
        _router: new algo.URLRouter({
          '/log/req/*': msg => (
            ((
              id
            ) => (
              id = msg.head.path.substring(9),
              _requests.set(id, msg),
              _combine(id)
            ))()
          ),
      
          '/log/res/*': msg => (
            ((
              id
            ) => (
              id = msg.head.path.substring(9),
              _responses.set(id, msg),
              _combine(id)
            ))()
          ),
      
          '/*': () => new Message({ status: 404 }, 'Not found'),
        }),
      
        _combine: (id) => (
          ((
            dir, proto, status, attachments,
            req, reqInfo, reqBody, reqHeaders, reqTime, reqType, reqLogBody,
            res, resInfo, resBody, resHeaders, resTime, resType, resLogBody,
          ) => (
            req = _requests.get(id),
            res = _responses.get(id),
            req && res ? (
              _requests.remove(id),
              _responses.remove(id),
              reqHeaders = req.head.headers,
              resHeaders = res.head.headers,
              reqInfo = JSON.parse(reqHeaders['x-pipy-log']),
              resInfo = JSON.parse(resHeaders['x-pipy-log']),
              delete reqHeaders['x-pipy-log'],
              delete resHeaders['x-pipy-log'],
              reqTime = reqInfo.time,
              resTime = resInfo.time,
              reqType = reqHeaders['content-type']?.split?.(';')?.[0],
              resType = resHeaders['content-type']?.split?.(';')?.[0],
              reqLogBody = Boolean(_CONTENT_TYPES[reqType]),
              resLogBody = Boolean(_CONTENT_TYPES[resType]),
              dir = reqInfo.dir,
              proto = reqInfo.proto,
              status = resInfo.status,
              _counters[proto].total = (_counters[proto].total|0) + 1,
              _statuses[proto][status] = (_statuses[proto][status]|0) + 1,
              _percentile[proto][dir]?.score?.(resTime - reqTime),
              proto === 'dubbo' ? (
                reqBody = Hessian.decode(req.body),
                resBody = Hessian.decode(res.body),
                reqBody && resBody ? (
                  attachments = reqBody.pop(),
                  status !== 20 && (_counters[proto].error = (_counters[proto].error|0) + 1),
                  new Message(
                    JSON.encode({
                      rid: +id,
                      sid: reqInfo.session,
                      iid: _INSTANCE_ID,
                      dir,
                      proto,
                      req: {
                        id: reqInfo.id,
                        version: reqBody?.[0],
                        'service.name': reqBody?.[1],
                        'service.version': reqBody?.[2],
                        'method.name': reqBody?.[3],
                        'method.type': reqBody?.[4],
                        arguments: reqBody,
                        attachments,
                      },
                      res: {
                        status,
                        type: resBody?.[0],
                        value: resBody?.[1],
                      },
                      reqTime,
                      resTime,
                      reqSize: req.body.size,
                      resSize: res.body.size,
                      remoteAddr: reqInfo.remoteAddr,
                      remotePort: reqInfo.remotePort,
                      localAddr: reqInfo.localAddr,
                      localPort: reqInfo.localPort,
                      target: reqInfo.target,
                      node: _NODE_INFO,
                      pod: _POD_INFO,
                      service: _SERVICE_INFO,
                      trace: {
                        id: attachments?.['X-B3-TraceId'],
                        span: attachments?.['X-B3-SpanId'],
                        parent: attachments?.['X-B3-ParentSpanId'],
                        sampled: attachments?.['X-B3-Sampled'],
                      },
                    }).push('\n')
                  )
                ) : new Message
              ) : (
                status >= 400 && (_counters[proto].error = (_counters[proto].total|0) + 1),
                new Message(
                  JSON.encode({
                    rid: +id,
                    sid: reqInfo.session,
                    iid: _INSTANCE_ID,
                    dir,
                    proto,
                    req: {
                      protocol: reqInfo.protocol,
                      method: reqInfo.method,
                      path: reqInfo.path,
                      headers: reqHeaders,
                      body: reqLogBody ? req.body.toString() : undefined,
                    },
                    res: {
                      protocol: resInfo.protocol,
                      status,
                      statusText: resInfo.statusText,
                      headers: resHeaders,
                      body: resLogBody ? res.body.toString() : undefined,
                    },
                    reqTime,
                    resTime,
                    reqSize: reqInfo.size,
                    resSize: resInfo.size,
                    remoteAddr: reqInfo.remoteAddr,
                    remotePort: reqInfo.remotePort,
                    localAddr: reqInfo.localAddr,
                    localPort: reqInfo.localPort,
                    target: reqInfo.target,
                    node: _NODE_INFO,
                    pod: _POD_INFO,
                    service: _SERVICE_INFO,
                    trace: {
                      id: reqHeaders['x-b3-traceid'],
                      span: reqHeaders['x-b3-spanid'],
                      parent: reqHeaders['x-b3-parentspanid'],
                      sampled: reqHeaders['x-b3-sampled'],
                    },
                  }).push('\n')
                )
              )
            ) : new Message
          ))()
        ),
      })
      
      // Request/response input
      .listen(os.env.PIPY_LOGGER_LISTEN || 9090)
        .decodeHttpRequest()
        .onMessageStart(
          msg => _contentEncoding = msg.head.headers['content-encoding']
        )
        .link(
          'decompress', () => _contentEncoding === 'gzip',
          'bypass'
        )
        .replaceMessage(
          msg => _router.find(msg.head.path)(msg)
        )
        .merge('batch')
        .dummy()
      
      .pipeline('decompress')
        .decompressMessageBody('inflate')
      
      // Accumulate log messages into batches
      .pipeline('batch')
        .pack(
          1000,
          {
            timeout: 5,
          }
        )
        .replaceMessageStart(
          () => new MessageStart({
            method: 'POST',
            path: _LOG_SINK_URL.path,
            headers: {
              'Host': _LOG_SINK_URL.host,
              'Content-Type': 'application/json',
              'Authorization': _LOG_AUTH,
            }
          })
        )
        .encodeHttpRequest()
        .connect(
          () => _LOG_SINK_URL.host,
          {
            bufferLimit: '8m',
          }
        )
      
      // Regularly push metrics out
      .task('5s')
        .replaceMessage(
          () => new Message(
            {
              method: 'POST',
              path: _METRICS_SINK_URL.path,
              headers: {
                'content-type': 'application/json',
              },
            },
            JSON.encode({
              counts: _counters,
              status: _statuses,
              latency: {
                http: {
                  inbound: {
                    p90: _percentile.http.inbound.calculate(90),
                    p95: _percentile.http.inbound.calculate(95),
                    p99: _percentile.http.inbound.calculate(99),
                  },
                  outbound: {
                    p90: _percentile.http.outbound.calculate(90),
                    p95: _percentile.http.outbound.calculate(95),
                    p99: _percentile.http.outbound.calculate(99),
                  },
                },
                dubbo: {
                  inbound: {
                    p90: _percentile.dubbo.inbound.calculate(90),
                    p95: _percentile.dubbo.inbound.calculate(95),
                    p99: _percentile.dubbo.inbound.calculate(99),
                  },
                  outbound: {
                    p90: _percentile.dubbo.outbound.calculate(90),
                    p95: _percentile.dubbo.outbound.calculate(95),
                    p99: _percentile.dubbo.outbound.calculate(99),
                  },
                },
              },
            })
          )
        )
        .mux('send-metrics')
        .replaceMessage(
          () => (
            _counters.http = {},
            _counters.dubbo = {},
            _statuses.http = {},
            _statuses.dubbo = {},
            _percentile.http.inbound.reset(),
            _percentile.http.outbound.reset(),
            _percentile.dubbo.inbound.reset(),
            _percentile.dubbo.outbound.reset(),
            new SessionEnd
          )
        )
      
      .pipeline('send-metrics')
        .encodeHttpRequest()
        .connect(
          () => _METRICS_SINK_URL.host
        )
        .decodeHttpResponse()
      
      .pipeline('bypass')
